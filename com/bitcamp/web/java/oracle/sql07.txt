O
--문제1
SELECT * FROM employees;

SELECT hire_date
FROM employees;

방법1.
SELECT SUBSTR(hire_date,4,2) 
FROM employees;

SELECT SUBSTR(hire_date,4,2) 
FROM employees
GROUP BY SUBSTR(hire_date,4,2);

SELECT SUBSTR(hire_date,4,2) 월, COUNT(*) 직원수
FROM employees
GROUP BY SUBSTR(hire_date,4,2);

SELECT CONCAT(SUBSTR(hire_date,4,2),'월') 월, COUNT(*) 직원수
FROM employees
GROUP BY SUBSTR(hire_date,4,2);

SELECT CONCAT(SUBSTR(hire_date,4,2),'월') 월, COUNT(*) 직원수
FROM employees
GROUP BY SUBSTR(hire_date,4,2)
ORDER BY 월;



방법2.
SELECT TO_CHAR(hire_date,'MM')
FROM employees;

SELECT TO_CHAR(hire_date,'MM'), COUNT(*)
FROM employees
GROUP BY TO_CHAR(hire_date,'MM');

SELECT TO_CHAR(hire_date,'MM') 월, COUNT(*) 직원수
FROM employees
GROUP BY TO_CHAR(hire_date,'MM');

SELECT CONCAT(TO_CHAR(hire_date,'MM'),'월') 월, COUNT(*) 직원수
FROM employees
GROUP BY TO_CHAR(hire_date,'MM');

=>
SELECT CONCAT(TO_CHAR(hire_date,'MM'),'월') 월, COUNT(*) 직원수
FROM employees
GROUP BY TO_CHAR(hire_date,'MM')
ORDER BY 월;





O
--문제2

--1
-- 부서별 최고급여 (서브쿼리)
SELECT department_id,MAX(salary)
FROM employees
GROUP BY department_id;

--2
SELECT department_id, first_name, salary
FROM employees;

=>
SELECT D.department_name, E.first_name, E.salary
FROM employees E, departments D, (SELECT department_id, MAX(salary) 부서별최대월급
			FROM employees
			GROUP BY department_id) vt
WHERE E.department_id = vt.department_id AND E.department_id = D.department_id AND E.salary = vt.부서별최대월급;



O
--문제3
SELECT department_id, MAX(salary), MIN(salary), ROUND(AVG(salary),0)
FROM employees
GROUP BY department_id
ORDER BY AVG(salary);


-- 서브쿼리 1. It부서의 평균급여
SELECT AVG(salary) 
FROM employees
WHERE department_id = (SELECT department_id 
			FROM departments 
			WHERE department_name ='IT');


-- 서브쿼리 2. Sales 부서의 평균급여
SELECT AVG(salary)
FROM employees
WHERE department_id = (SELECT department_id
			FROM departments
			WHERE department_name ='Sales');



==========================
BETWEEN a AND b
: a 와 b 의 값을 포함하므로 답 X
=========================
SELECT department_id, MAX(salary), MIN(salary), TRUNC(AVG(salary),0)
FROM employees
WHERE department_id IS NOT NULL
GROUP BY department_id
HAVING AVG(salary) BETWEEN 
(SELECT AVG(salary) 
FROM employees
WHERE department_id = (SELECT department_id 
			FROM departments 
			WHERE department_name ='IT'))
AND 
(SELECT AVG(salary)
FROM employees
WHERE department_id = (SELECT department_id
			FROM departments
			WHERE department_name ='Sales'))
ORDER BY department_id;



======================
HAVING 절에서 AND로 나열 O
======================
SELECT department_id, MAX(salary) 최대급여, MIN(salary) 최소급여, TRUNC(AVG(salary),0) 평균급여
FROM employees 
WHERE department_id IS NOT NULL
GROUP BY department_id
HAVING 
AVG(salary) > (SELECT AVG(salary) 
		FROM employees
		WHERE department_id = (SELECT department_id 
					FROM departments 
					WHERE department_name ='IT'))
AND 
AVG(salary) < (SELECT AVG(salary)
		FROM employees
		WHERE department_id = (SELECT department_id
					FROM departments
					WHERE department_name ='Sales'))
ORDER BY department_id;


=>
SELECT D.department_name, MAX(E.salary) 최대급여, MIN(E.salary) 최소급여, TRUNC(AVG(E.salary),0) 평균급여
FROM employees E, departments D
WHERE E.department_id IS NOT NULL
AND E.department_id = D.department_id
GROUP BY E.department_id, D.department_name
HAVING 
AVG(salary) > (SELECT AVG(salary) 
		FROM employees
		WHERE department_id = (SELECT department_id 
					FROM departments 
					WHERE department_name ='IT'))
AND 
AVG(salary) < (SELECT AVG(salary)
		FROM employees
		WHERE department_id = (SELECT department_id
					FROM departments
					WHERE department_name ='Sales'))
ORDER BY E.department_id;



O
--문제4
SELECT * FROM employees;
SELECT department_id FROM employees;

SELECT department_id, COUNT(employee_id)
FROM employees
GROUP BY department_id;

SELECT department_id, COUNT(employee_id) 
FROM employees
GROUP BY department_id
HAVING COUNT(employee_id) = 1;

=============================
(+) 를 어디에? 
SELECT D.department_name, COUNT(E.employee_id) 
FROM employees E, departments D
WHERE E.department_id = D.department_id(+)
GROUP BY E.department_id, D.department_name
HAVING COUNT(E.employee_id) = 1;

SELECT D.department_name, COUNT(E.employee_id) 
FROM employees E, departments D
WHERE E.department_id = D.department_id(+)
GROUP BY E.department_id, D.department_name
HAVING COUNT(E.employee_id) = 1
ORDER BY D.department_name NULLS LAST;

=>
SELECT NVL(D.department_name,'<신생부서>') 부서명, COUNT(E.employee_id) 직원수
FROM employees E, departments D
WHERE E.department_id = D.department_id(+)
GROUP BY E.department_id, D.department_name
HAVING COUNT(E.employee_id) = 1
ORDER BY D.department_name NULLS LAST;



======================================================================

O
--문제1

SELECT * FROM employees;

=>
SELECT D.department_name 부서명, TO_CHAR(E.hire_date,'MM') 입사월, COUNT(E.employee_id) 직원수
FROM employees E, departments D
WHERE E.department_id = D.department_id
GROUP BY D.department_name, TO_CHAR(E.hire_date,'MM')
HAVING COUNT(E.employee_id) >= 5
ORDER BY 부서명;




O
--문제2

SELECT * FROM countries;
SELECT * FROM locations; 

=>
SELECT NVL(C.country_name,'<부서없음>') 국가명 ,NVL(L.city,'<부서없음>') 도시명, COUNT(E.employee_id) 직원수
FROM employees E, departments D, locations L, countries C
WHERE E.department_id = D.department_id(+) AND D.location_id=L.location_id(+) AND L.country_id=C.country_id(+)
GROUP BY L.city,C.country_name
ORDER BY C.country_name;



O
--문제3
SELECT * FROM departments;


SELECT employee_id, first_name, salary
FROM employees;

-- 부서별 최고급여
SELECT department_id, MAX(salary)
FROM employees
GROUP BY department_id;

-- 부서별 평균급여 
SELECT department_id, ROUND(AVG(salary),2)
FROM employees
GROUP BY department_id;

=> 가상테이블 2개
SELECT E.employee_id, E.first_name, E.salary, vt2.부서평균
FROM employees E, (SELECT department_id, MAX(salary) 최대급여
			FROM employees
			GROUP BY department_id) vt, (SELECT department_id, ROUND(AVG(salary),2) 부서평균
							FROM employees
							GROUP BY department_id) vt2
WHERE E.department_id = vt.department_id AND E.salary = vt.최대급여 AND E.department_id = vt2.department_id
ORDER BY E.employee_id;


O
--문제4

CREATE TABLE salgrade(
	grade   NUMBER(2)   PRIMARY KEY,
	LOSAL   NUMBER(5)   NOT NULL,
	HISAL   NUMBER(5)   NOT NULL
);

SELECT * FROM salgrade;

INSERT INTO salgrade VALUES(1,1000,5000);
INSERT INTO salgrade VALUES(2,5001,10000);
INSERT INTO salgrade VALUES(3,10001,20000);
INSERT INTO salgrade VALUES(4,20001,30000);

=>
SELECT CONCAT(S.grade,'등급') 급여등급, COUNT(employee_id)  직원수
FROM employees E, salgrade S
WHERE E.salary BETWEEN S.losal AND S.hisal
GROUP BY S.grade
ORDER BY grade;


=========================================================================
O
--문제1
SELECT * FROM employees;

SELECT commission_pct, COUNT(employee_id) 
FROM employees
GROUP BY commission_pct;

SELECT commission_pct, COUNT(employee_id) 
FROM employees
GROUP BY commission_pct;

SELECT TRUNC(commission_pct, 1), COUNT(employee_id) 
FROM employees
GROUP BY TRUNC(commission_pct, 1);

SELECT TO_CHAR(TRUNC(commission_pct, 1)), COUNT(employee_id) 
FROM employees
GROUP BY TO_CHAR(TRUNC(commission_pct, 1));

SELECT NVL(TO_CHAR(TRUNC(commission_pct, 1)),'<커미션 없음>'), COUNT(employee_id) 
FROM employees
GROUP BY NVL(TO_CHAR(TRUNC(commission_pct, 1)),'<커미션 없음>');

=>
SELECT NVL(TO_CHAR(TRUNC(commission_pct, 1)),'<커미션 없음>') 커미션, COUNT(employee_id) 직원수
FROM employees
GROUP BY NVL(TO_CHAR(TRUNC(commission_pct, 1)),'<커미션 없음>')
ORDER BY 커미션 DESC, 커미션 NULLS FIRST;


O
-- 문제2

-- RANK, employee_id, commission_pct  컬럼을 가지는 가상테이블 
SELECT ROW_NUMBER()OVER(ORDER BY commission_pct DESC), employee_id, commission_pct
FROM employees
WHERE commission_pct IS NOT NULL;

=> 방법1
SELECT D.department_name 부서명, E.first_name 직원명, E.salary 급여, E.commission_pct 커미션
FROM employees E, departments D, (SELECT ROW_NUMBER()OVER(ORDER BY commission_pct DESC) RANK, employee_id,  commission_pct
				FROM employees
				WHERE commission_pct IS NOT NULL) vt
WHERE E.department_id = D.department_id AND E.employee_id = vt.employee_id AND vt.RANK <= 4 
ORDER BY E.salary DESC;


=> 방법2
SELECT D.department_name 부서명, E.first_name 직원명, E.salary 급여, E.commission_pct 커미션
FROM employees E, departments D, (SELECT employee_id,  commission_pct
				FROM employees
				WHERE commission_pct IS NOT NULL
				ORDER BY commission_pct DESC) vt
WHERE E.department_id = D.department_id AND E.employee_id = vt.employee_id AND ROWNUM <=4
ORDER BY E.salary DESC;